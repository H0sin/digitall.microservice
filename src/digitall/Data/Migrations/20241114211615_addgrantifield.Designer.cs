// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.SqlServer.Types;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DigitallDbContext))]
    [Migration("20241114211615_addgrantifield")]
    partial class addgrantifield
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<long?>("BotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CardToCardPayment")
                        .HasColumnType("bit");

                    b.Property<long?>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmailActiveCode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("FinalCountTestMarzbanAccount")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAgent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("MobileActiveCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TelegramUsername")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("UserStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AgentId = 100001L,
                            Avatar = "",
                            Balance = 10000000000L,
                            BotId = 7419690675L,
                            CardToCardPayment = false,
                            ChatId = 1246211305L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 532, DateTimeKind.Local).AddTicks(9607),
                            Email = "h.faraji8079@gmail.com",
                            EmailActiveCode = "0a450bae3a3345d4a517adeb6467fe9d",
                            FinalCountTestMarzbanAccount = 0L,
                            FirstName = "حسین",
                            IsAgent = false,
                            IsBlocked = false,
                            IsDelete = false,
                            IsEmailActive = true,
                            IsMobileActive = true,
                            IsSupperAdmin = false,
                            LastName = "فرجی",
                            Mobile = "09913737962",
                            MobileActiveCode = "344583",
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 532, DateTimeKind.Local).AddTicks(9620),
                            ModifyBy = 1L,
                            Password = "FC-EA-92-0F-74-12-B5-DA-7B-E0-CF-42-B8-C9-37-59",
                            TelegramUsername = "lll_hosin_lll",
                            UserStatus = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Agent.Agent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentAdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("AgentCode")
                        .HasColumnType("bigint");

                    b.Property<SqlHierarchyId?>("AgentPath")
                        .HasColumnType("hierarchyid");

                    b.Property<long>("AgentPercent")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowNegative")
                        .HasColumnType("bit");

                    b.Property<long>("AmountWithNegative")
                        .HasColumnType("bigint");

                    b.Property<string>("BrandAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisabledAccountTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NegativeChargeCeiling")
                        .HasColumnType("bigint");

                    b.Property<string>("PersianBrandName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long?>("SpecialPercent")
                        .HasColumnType("bigint");

                    b.Property<long>("UserPercent")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Agent");

                    b.HasData(
                        new
                        {
                            Id = 100001L,
                            AgentAdminId = 1L,
                            AgentCode = 687209L,
                            AgentPath = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/"),
                            AgentPercent = 0L,
                            AllowNegative = false,
                            AmountWithNegative = 0L,
                            BrandName = "Samani",
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 524, DateTimeKind.Local).AddTicks(4020),
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 524, DateTimeKind.Local).AddTicks(4146),
                            ModifyBy = 1L,
                            NegativeChargeCeiling = 0L,
                            PersianBrandName = "سامانی",
                            UserPercent = 0L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Agent.AgentOptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("WelcomeMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("AgentOption");
                });

            modelBuilder.Entity("Domain.Entities.Agent.AgentRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AgentPercent")
                        .HasColumnType("bigint");

                    b.Property<string>("AgentRequestStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumAmount")
                        .HasColumnType("int");

                    b.Property<int>("MinimalAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentDescription")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("PersianBrandName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserPercent")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AgentRequest");
                });

            modelBuilder.Entity("Domain.Entities.Apple.AppleId", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AppleIdTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppleIdTypeId");

                    b.ToTable("AppleId");
                });

            modelBuilder.Entity("Domain.Entities.Apple.AppleIdType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Warranty")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("AppleIdTypes");
                });

            modelBuilder.Entity("Domain.Entities.Authorization.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(1103),
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(1106),
                            ModifyBy = 1L,
                            SystemName = "FilterUsers",
                            Title = "لیست کاربران"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Authorization.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 533, DateTimeKind.Local).AddTicks(9363),
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 533, DateTimeKind.Local).AddTicks(9367),
                            ModifyBy = 1L,
                            Title = "مدیر"
                        },
                        new
                        {
                            Id = 2L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 533, DateTimeKind.Local).AddTicks(9376),
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 533, DateTimeKind.Local).AddTicks(9377),
                            ModifyBy = 1L,
                            Title = "همکار"
                        },
                        new
                        {
                            Id = 3L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 533, DateTimeKind.Local).AddTicks(9378),
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 533, DateTimeKind.Local).AddTicks(9378),
                            ModifyBy = 1L,
                            Title = "کاربر"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Authorization.RoleMenus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMenus");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9673),
                            IsDelete = false,
                            MenuId = 1L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9676),
                            ModifyBy = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9870),
                            IsDelete = false,
                            MenuId = 2L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9871),
                            ModifyBy = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9873),
                            IsDelete = false,
                            MenuId = 3L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9873),
                            ModifyBy = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9874),
                            IsDelete = false,
                            MenuId = 4L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9875),
                            ModifyBy = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9876),
                            IsDelete = false,
                            MenuId = 5L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9877),
                            ModifyBy = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9880),
                            IsDelete = false,
                            MenuId = 6L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9880),
                            ModifyBy = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9882),
                            IsDelete = false,
                            MenuId = 1L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9882),
                            ModifyBy = 1L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9883),
                            IsDelete = false,
                            MenuId = 2L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9884),
                            ModifyBy = 1L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9885),
                            IsDelete = false,
                            MenuId = 3L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9885),
                            ModifyBy = 1L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9887),
                            IsDelete = false,
                            MenuId = 4L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9887),
                            ModifyBy = 1L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9888),
                            IsDelete = false,
                            MenuId = 5L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(9889),
                            ModifyBy = 1L,
                            RoleId = 2L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Authorization.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(2710),
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(2713),
                            ModifyBy = 1L,
                            PermissionId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Authorization.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(6728),
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(6731),
                            ModifyBy = 1L,
                            RoleId = 1L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("CategoryType")
                        .HasColumnType("tinyint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Entities.Country.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.Marzban.MarzbanServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HolderInbound")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerIp")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ServerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServerPort")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Ssl")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TypeHolderInbound")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Users")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("MarzbanServers");
                });

            modelBuilder.Entity("Domain.Entities.Marzban.MarzbanUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AddedHolderInbound")
                        .HasColumnType("bit");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Data_Limit")
                        .HasColumnType("bigint");

                    b.Property<long?>("Expire")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("Lifetime_Used_Traffic")
                        .HasColumnType("bigint");

                    b.Property<string>("Links")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MarzbanServerId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarzbanVpnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OnHoldExpireDuration")
                        .HasColumnType("bigint");

                    b.Property<string>("OnHoldTimeout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Online_At")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ServiceTime")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sub_Last_User_Agent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Sub_Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subscription_Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Used_Traffic")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("MarzbanUsers");
                });

            modelBuilder.Entity("Domain.Entities.Marzban.MarzbanVpn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayMax")
                        .HasColumnType("int");

                    b.Property<int>("DayMin")
                        .HasColumnType("int");

                    b.Property<long>("DayPrice")
                        .HasColumnType("bigint");

                    b.Property<bool>("Desired")
                        .HasColumnType("bit");

                    b.Property<int>("GbMax")
                        .HasColumnType("int");

                    b.Property<int>("GbMin")
                        .HasColumnType("int");

                    b.Property<long>("GbPrice")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("MarzbanServerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Proxies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shadowsocks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Test_Active")
                        .HasColumnType("bit");

                    b.Property<int>("Test_Days")
                        .HasColumnType("int");

                    b.Property<int>("Test_TotalMg")
                        .HasColumnType("int");

                    b.Property<string>("Trojan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vless")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vmess")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarzbanServerId");

                    b.ToTable("MarzbanVpns");
                });

            modelBuilder.Entity("Domain.Entities.Marzban.MarzbanVpnTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<int>("Gb")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("MarzbanVpnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MarzbanVpnId");

                    b.ToTable("MarzbanVpnTemplates");
                });

            modelBuilder.Entity("Domain.Entities.Menu.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Sorted")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(4551),
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(4548),
                            ModifyBy = 1L,
                            Sorted = 1,
                            Title = "اصلی"
                        },
                        new
                        {
                            Id = 2L,
                            Action = "Index",
                            Active = true,
                            Area = "",
                            Controller = "Home",
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(4745),
                            Icon = "box",
                            IsDelete = false,
                            Link = "/",
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(4743),
                            ModifyBy = 1L,
                            ParentId = 1L,
                            Sorted = 2,
                            Title = "داشبورد"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(5333),
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(5332),
                            ModifyBy = 1L,
                            Sorted = 3,
                            Title = "عملیات"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(5335),
                            Icon = "list",
                            IsDelete = false,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(5335),
                            ModifyBy = 1L,
                            ParentId = 3L,
                            Sorted = 4,
                            Title = "کاربران"
                        },
                        new
                        {
                            Id = 5L,
                            Action = "Users",
                            Active = true,
                            Area = "",
                            Controller = "Account",
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(5338),
                            IsDelete = false,
                            Link = "Account/Users",
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(5337),
                            ModifyBy = 1L,
                            ParentId = 4L,
                            Sorted = 5,
                            Title = "لیست کاربران"
                        },
                        new
                        {
                            Id = 6L,
                            Action = "AllUsers",
                            Active = true,
                            Area = "",
                            Controller = "Account",
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(5350),
                            IsDelete = false,
                            Link = "Account/AllUsers",
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 534, DateTimeKind.Local).AddTicks(5349),
                            ModifyBy = 1L,
                            ParentId = 4L,
                            Sorted = 6,
                            Title = "لیست همه کاربران"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Notification.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ButtonsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Execption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileCaption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("ForAllMember")
                        .HasColumnType("bit");

                    b.Property<bool>("Forward")
                        .HasColumnType("bit");

                    b.Property<long?>("ForwarderChatId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<byte>("NotificationType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Send")
                        .HasColumnType("bit");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Domain.Entities.Order.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TracingCode")
                        .HasMaxLength(300)
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Domain.Entities.Order.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderDeatilType")
                        .HasColumnType("int");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Domain.Entities.Product.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("VpnId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Domain.Entities.Sanaei.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Down")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<long>("ExpiryTime")
                        .HasColumnType("bigint");

                    b.Property<long>("InboundId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("OrderDetailId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Reset")
                        .HasColumnType("bigint");

                    b.Property<string>("SanaeiClientId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("TotalGb")
                        .HasColumnType("bigint");

                    b.Property<long>("Up")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InboundId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Domain.Entities.Sanaei.Inbound", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Down")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<long>("ExpiryTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Listen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Port")
                        .HasColumnType("bigint");

                    b.Property<string>("Protocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SanaeiInboundId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sniffing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreamSettings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Up")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Inbounds");
                });

            modelBuilder.Entity("Domain.Entities.Server.Server", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ServerStatus")
                        .HasColumnType("int");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("Domain.Entities.Subscription.Subscribtion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramBot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("BotId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("HostAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersionName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Route")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SecretToken")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Token")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("TelegramBots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AgentId = 100001L,
                            BotId = 7419690675L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(7281),
                            Description = "ربات مستر ما",
                            HostAddress = "https://364c-80-240-30-200.ngrok-free.app",
                            IsDelete = false,
                            Link = "https://t.me/master_digitall_vpn_bot",
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(7939),
                            ModifyBy = 1L,
                            Name = "master_digitall_vpn_bot",
                            PersionName = "ربات اصلی مستر",
                            Route = "/7332050396:AAHvkWaF4MhUb3U8yfvSlD1y81i_jF2tCN0",
                            SecretToken = "",
                            Token = "7332050396:AAHvkWaF4MhUb3U8yfvSlD1y81i_jF2tCN0"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramButtons", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalProp1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AdditionalProp2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AdditionalProp3")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AdditionalProp4")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CallBackQuery")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long?>("TelegramBotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("TelegramBotId");

                    b.ToTable("TelegramButtons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(9129),
                            IsDelete = false,
                            IsLike = true,
                            Link = "https://t.me/master_digitall_vpn_bot",
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(9323),
                            ModifyBy = 1L,
                            Name = "master_digitall_vpn_bot",
                            Title = "شروع ربات"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("TelegramBotId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TelegramBotId")
                        .IsUnique()
                        .HasFilter("[TelegramBotId] IS NOT NULL");

                    b.ToTable("TelegramGroups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ChatId = -1002449260173L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            Name = "مستر گروه",
                            TelegramBotId = 1L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramGroupTopics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Created")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("MessageThreadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("TelegramGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TelegramTopicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TelegramGroupId");

                    b.HasIndex("TelegramTopicId");

                    b.ToTable("TelegramGroupTopics");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = false,
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            TelegramGroupId = 1L,
                            TelegramTopicId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = false,
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            TelegramGroupId = 1L,
                            TelegramTopicId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = false,
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            TelegramGroupId = 1L,
                            TelegramTopicId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = false,
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            TelegramGroupId = 1L,
                            TelegramTopicId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = false,
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            TelegramGroupId = 1L,
                            TelegramTopicId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = false,
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            TelegramGroupId = 1L,
                            TelegramTopicId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = false,
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            TelegramGroupId = 1L,
                            TelegramTopicId = 7L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramTopic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconCustomEmojiId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelegramTopicCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TelegramTopics");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconCustomEmojiId = "🔧",
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            Name = "استارت ربات 🔧",
                            TelegramTopicCategory = "StartReports"
                        },
                        new
                        {
                            Id = 2L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconCustomEmojiId = "💰",
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            Name = "گزارشات مالی 💰",
                            TelegramTopicCategory = "FinancialReports"
                        },
                        new
                        {
                            Id = 3L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconCustomEmojiId = "🐞",
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            Name = "گزارشات باگ 🐞",
                            TelegramTopicCategory = "BogsReports"
                        },
                        new
                        {
                            Id = 4L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconCustomEmojiId = "🛒",
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            Name = "گزارشات خرید 🛒",
                            TelegramTopicCategory = "BuyReports"
                        },
                        new
                        {
                            Id = 5L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconCustomEmojiId = "🔄",
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            Name = "گزارشات تمدید 🔄",
                            TelegramTopicCategory = "RenewReports"
                        },
                        new
                        {
                            Id = 6L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconCustomEmojiId = "💳",
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            Name = "گزارشات پرداخت 💳",
                            TelegramTopicCategory = "PaymentReports"
                        },
                        new
                        {
                            Id = 7L,
                            CreateBy = 0L,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconCustomEmojiId = "❌",
                            IsDelete = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyBy = 0L,
                            Name = "گزارشات حذفی ها ❌",
                            TelegramTopicCategory = "DeletedReports"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Transaction.AgentsIncomesDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderDetailId")
                        .HasColumnType("bigint");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<long>("Profit")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("AgentsIncomesDetail");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AvatarTransaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("TransactionCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionDetailId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TransactionStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionDetailId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.TransactionDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("MaximumAmountForAgent")
                        .HasColumnType("bigint");

                    b.Property<long?>("MaximumAmountForUser")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinimalAmountForAgent")
                        .HasColumnType("bigint");

                    b.Property<long?>("MinimalAmountForUser")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("TransactionDetail");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AgentId = 100001L,
                            CardHolderName = "حسین فرجی",
                            CardNumber = "6037691610791079",
                            CreateBy = 1L,
                            CreateDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(5276),
                            Description = "توضیحات",
                            IsDelete = false,
                            MaximumAmountForAgent = 2000000L,
                            MaximumAmountForUser = 2000000L,
                            MinimalAmountForAgent = 100000L,
                            MinimalAmountForUser = 10000L,
                            ModifiedDate = new DateTime(2024, 11, 15, 0, 46, 13, 535, DateTimeKind.Local).AddTicks(5279),
                            ModifyBy = 1L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Vpn.Vpn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Days")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberUser")
                        .HasColumnType("bigint");

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TotoalGb")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Vpn");
                });

            modelBuilder.Entity("Domain.Entities.Vpn.VpnCountry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("VpnId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("VpnId");

                    b.ToTable("VpnCountry");
                });

            modelBuilder.Entity("Domain.Entities.Wireguard.Peer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalDay")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalVolume")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WireguardServerId")
                        .HasColumnType("bigint");

                    b.Property<long>("WireguardVpnId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WireguardVpnId");

                    b.ToTable("Peers");
                });

            modelBuilder.Entity("Domain.Entities.Wireguard.WireguardServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<bool>("Ssl")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WireguardServers");
                });

            modelBuilder.Entity("Domain.Entities.Wireguard.WireguardVpn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayMax")
                        .HasColumnType("int");

                    b.Property<int>("DayMin")
                        .HasColumnType("int");

                    b.Property<long>("DayPrice")
                        .HasColumnType("bigint");

                    b.Property<bool>("Desired")
                        .HasColumnType("bit");

                    b.Property<int>("GbMax")
                        .HasColumnType("int");

                    b.Property<int>("GbMin")
                        .HasColumnType("int");

                    b.Property<long>("GbPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("InterfaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("MaxPeer")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Test_Active")
                        .HasColumnType("bit");

                    b.Property<int>("Test_Days")
                        .HasColumnType("int");

                    b.Property<int>("Test_TotalMg")
                        .HasColumnType("int");

                    b.Property<long>("WireguardServerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WireguardServerId");

                    b.ToTable("WireguardVpn");
                });

            modelBuilder.Entity("Domain.Entities.Wireguard.WireguardVpnTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<int>("Gb")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifyBy")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WireguardVpnId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WireguardVpnId");

                    b.ToTable("WireguardVpnTemplates");
                });

            modelBuilder.Entity("Domain.Entities.Account.User", b =>
                {
                    b.HasOne("Domain.Entities.Agent.Agent", "Agent")
                        .WithMany("Users")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Domain.Entities.Agent.AgentOptions", b =>
                {
                    b.HasOne("Domain.Entities.Agent.Agent", "Agent")
                        .WithOne("AgentOptions")
                        .HasForeignKey("Domain.Entities.Agent.AgentOptions", "AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Domain.Entities.Agent.AgentRequest", b =>
                {
                    b.HasOne("Domain.Entities.Account.User", "User")
                        .WithOne("AgentRequest")
                        .HasForeignKey("Domain.Entities.Agent.AgentRequest", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Apple.AppleId", b =>
                {
                    b.HasOne("Domain.Entities.Apple.AppleIdType", "AppleIdType")
                        .WithMany("AppleIds")
                        .HasForeignKey("AppleIdTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppleIdType");
                });

            modelBuilder.Entity("Domain.Entities.Apple.AppleIdType", b =>
                {
                    b.HasOne("Domain.Entities.Product.Product", "Product")
                        .WithMany("AppleIdTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Authorization.Permission", b =>
                {
                    b.HasOne("Domain.Entities.Authorization.Permission", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Authorization.RoleMenus", b =>
                {
                    b.HasOne("Domain.Entities.Menu.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Authorization.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Authorization.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Authorization.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Authorization.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Authorization.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Authorization.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Account.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Marzban.MarzbanUser", b =>
                {
                    b.HasOne("Domain.Entities.Order.OrderDetail", "OrderDetail")
                        .WithMany("MarzbanUsers")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Domain.Entities.Marzban.MarzbanVpn", b =>
                {
                    b.HasOne("Domain.Entities.Marzban.MarzbanServer", "MarzbanServer")
                        .WithMany("MarzbanVpns")
                        .HasForeignKey("MarzbanServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarzbanServer");
                });

            modelBuilder.Entity("Domain.Entities.Marzban.MarzbanVpnTemplate", b =>
                {
                    b.HasOne("Domain.Entities.Marzban.MarzbanVpn", "MarzbanVpn")
                        .WithMany("MarzbanVpnTemplate")
                        .HasForeignKey("MarzbanVpnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarzbanVpn");
                });

            modelBuilder.Entity("Domain.Entities.Menu.Menu", b =>
                {
                    b.HasOne("Domain.Entities.Menu.Menu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Notification.Notification", b =>
                {
                    b.HasOne("Domain.Entities.Account.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Order.OrderDetail", b =>
                {
                    b.HasOne("Domain.Entities.Order.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Product.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Sanaei.Client", b =>
                {
                    b.HasOne("Domain.Entities.Sanaei.Inbound", "Inbound")
                        .WithMany("Clients")
                        .HasForeignKey("InboundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Order.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Inbound");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Domain.Entities.Sanaei.Inbound", b =>
                {
                    b.HasOne("Domain.Entities.Server.Server", "Server")
                        .WithMany("Inbounds")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Domain.Entities.Server.Server", b =>
                {
                    b.HasOne("Domain.Entities.Country.Country", "Country")
                        .WithMany("Servers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramBot", b =>
                {
                    b.HasOne("Domain.Entities.Agent.Agent", "Agent")
                        .WithOne("TelegramBot")
                        .HasForeignKey("Domain.Entities.Telegram.TelegramBot", "AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramButtons", b =>
                {
                    b.HasOne("Domain.Entities.Telegram.TelegramBot", "TelegramBot")
                        .WithMany("TelegramButtons")
                        .HasForeignKey("TelegramBotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TelegramBot");
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramGroup", b =>
                {
                    b.HasOne("Domain.Entities.Telegram.TelegramBot", "TelegramBot")
                        .WithOne("TelegramGroup")
                        .HasForeignKey("Domain.Entities.Telegram.TelegramGroup", "TelegramBotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TelegramBot");
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramGroupTopics", b =>
                {
                    b.HasOne("Domain.Entities.Telegram.TelegramGroup", "TelegramGroup")
                        .WithMany("TelegramGroupTopics")
                        .HasForeignKey("TelegramGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Telegram.TelegramTopic", "TelegramTopic")
                        .WithMany("TelegramGroupTopics")
                        .HasForeignKey("TelegramTopicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TelegramGroup");

                    b.Navigation("TelegramTopic");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.AgentsIncomesDetail", b =>
                {
                    b.HasOne("Domain.Entities.Agent.Agent", "Agent")
                        .WithMany("AgentsIncomesDetail")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Order.OrderDetail", "OrderDetail")
                        .WithMany("AgentsIncomesDetails")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.Transaction.TransactionDetail", "TransactionDetail")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TransactionDetail");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.TransactionDetail", b =>
                {
                    b.HasOne("Domain.Entities.Agent.Agent", "Agent")
                        .WithOne("TransactionDetail")
                        .HasForeignKey("Domain.Entities.Transaction.TransactionDetail", "AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Domain.Entities.Vpn.VpnCountry", b =>
                {
                    b.HasOne("Domain.Entities.Country.Country", "Country")
                        .WithMany("VpnCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vpn.Vpn", "Vpn")
                        .WithMany("VpnCountries")
                        .HasForeignKey("VpnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Vpn");
                });

            modelBuilder.Entity("Domain.Entities.Wireguard.Peer", b =>
                {
                    b.HasOne("Domain.Entities.Wireguard.WireguardVpn", "WireguardVpn")
                        .WithMany("Peers")
                        .HasForeignKey("WireguardVpnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WireguardVpn");
                });

            modelBuilder.Entity("Domain.Entities.Wireguard.WireguardVpn", b =>
                {
                    b.HasOne("Domain.Entities.Wireguard.WireguardServer", "WireguardServer")
                        .WithMany("WireguardVpn")
                        .HasForeignKey("WireguardServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WireguardServer");
                });

            modelBuilder.Entity("Domain.Entities.Wireguard.WireguardVpnTemplate", b =>
                {
                    b.HasOne("Domain.Entities.Wireguard.WireguardVpn", "WireguardVpn")
                        .WithMany("WireguardVpnTemplates")
                        .HasForeignKey("WireguardVpnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WireguardVpn");
                });

            modelBuilder.Entity("Domain.Entities.Account.User", b =>
                {
                    b.Navigation("AgentRequest")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Agent.Agent", b =>
                {
                    b.Navigation("AgentOptions");

                    b.Navigation("AgentsIncomesDetail");

                    b.Navigation("TelegramBot");

                    b.Navigation("TransactionDetail");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Apple.AppleIdType", b =>
                {
                    b.Navigation("AppleIds");
                });

            modelBuilder.Entity("Domain.Entities.Authorization.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.Authorization.Role", b =>
                {
                    b.Navigation("RoleMenus");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Category.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Country.Country", b =>
                {
                    b.Navigation("Servers");

                    b.Navigation("VpnCountries");
                });

            modelBuilder.Entity("Domain.Entities.Marzban.MarzbanServer", b =>
                {
                    b.Navigation("MarzbanVpns");
                });

            modelBuilder.Entity("Domain.Entities.Marzban.MarzbanVpn", b =>
                {
                    b.Navigation("MarzbanVpnTemplate");
                });

            modelBuilder.Entity("Domain.Entities.Menu.Menu", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("Domain.Entities.Order.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Entities.Order.OrderDetail", b =>
                {
                    b.Navigation("AgentsIncomesDetails");

                    b.Navigation("MarzbanUsers");
                });

            modelBuilder.Entity("Domain.Entities.Product.Product", b =>
                {
                    b.Navigation("AppleIdTypes");
                });

            modelBuilder.Entity("Domain.Entities.Sanaei.Inbound", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Domain.Entities.Server.Server", b =>
                {
                    b.Navigation("Inbounds");
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramBot", b =>
                {
                    b.Navigation("TelegramButtons");

                    b.Navigation("TelegramGroup");
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramGroup", b =>
                {
                    b.Navigation("TelegramGroupTopics");
                });

            modelBuilder.Entity("Domain.Entities.Telegram.TelegramTopic", b =>
                {
                    b.Navigation("TelegramGroupTopics");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.TransactionDetail", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Vpn.Vpn", b =>
                {
                    b.Navigation("VpnCountries");
                });

            modelBuilder.Entity("Domain.Entities.Wireguard.WireguardServer", b =>
                {
                    b.Navigation("WireguardVpn");
                });

            modelBuilder.Entity("Domain.Entities.Wireguard.WireguardVpn", b =>
                {
                    b.Navigation("Peers");

                    b.Navigation("WireguardVpnTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
